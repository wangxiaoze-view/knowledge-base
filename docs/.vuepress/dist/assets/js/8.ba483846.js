(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{325:function(t,a,s){"use strict";s.r(a);var v=s(4),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("最近看了一道前端的面试题，忽然发现了一个问题，事件循环的机制是怎么样的，那么队列呢？在了解相关文档之后，有涉及到了系统的进程与线程，在不同操作下延伸了线程的异步与同步，阻塞与非阻塞相关内容；")])]),t._v(" "),a("h2",{attrs:{id:"进程-线程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程-线程是什么"}},[t._v("#")]),t._v(" 进程，线程是什么？")]),t._v(" "),a("p",[t._v("正常情况下，对于前端开发人员"),a("code",[t._v("进程，线程")]),t._v("并是不是必须学习的一块内容，对于这些内容只需要了解即可；")]),t._v(" "),a("p",[t._v("可以这样理解，就是对于不同的系统，不论是手机系统还是电脑系统，还是浏览器系统，都会分配一个可运行程序的内存，但是对于不同的应用程序，所占用的内存空间也是大小不一的；")]),t._v(" "),a("p",[t._v("就拿手机来讲，手机上会有微信，qq，王者荣耀等相关的应用软件，而对于这些应用程序是需要分配一个可运行的内存空间，而对于微信来讲，是在系统中的某一个进程，而这个进程是需要不同的子线程运行的，如：登录注册，聊天，购物等等；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wangxiaoze.wang/hexo-blog/event-1.png",alt:"效果"}})]),t._v(" "),a("p",[t._v("而对于浏览器来讲：当打开浏览器，计算机会分配一个内存空间给到浏览器，而对于计算机来讲就是其中的一个进程，而这个进程涵盖着不同的线程；如下图，浏览器就是主线程，像一些 GPU，渲染程序就是一些依附于主程序的线程；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wangxiaoze.wang/hexo-blog/event-2.png",alt:"效果"}})]),t._v(" "),a("p",[t._v("而俩者的关系： "),a("strong",[a("code",[t._v("线程是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的时序性，实现进程内部的并发；")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wangxiaoze.wang/hexo-blog/event-3.png",alt:"效果"}})]),t._v(" "),a("p",[a("strong",[a("code",[t._v("线程是实现异步的一个方式，对于浏览器需要不同线程开辟不同虚拟空间处理对应的操作，不会因为等待其中一个任务执行完毕之后再去执行其他的线程；")])])]),t._v(" "),a("p",[t._v("思考：那么如果所有的线程都要等待上一个线程的执行成功才会继续执行，会导致一个什么结果？")]),t._v(" "),a("h2",{attrs:{id:"同步与异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步与异步"}},[t._v("#")]),t._v(" 同步与异步")]),t._v(" "),a("p",[t._v("先来简单讲一下俩者的区别：")]),t._v(" "),a("ul",[a("li",[t._v("[x] 同步: 同步就是顺序执行，执行完一个再执行下一个，需要等待、协调运行。")]),t._v(" "),a("li",[t._v("[x] 异步: 与同步相对，不需要等待，彼此之间都是独立的，在等待某事件的过程中继续做自己的事，不需要等待这一事件完成之后再工作；")])]),t._v(" "),a("p",[t._v("对于俩者区别的理解可参考如下图，切记"),a("code",[t._v("同步会导致线程的阻塞, 如下图图三")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wangxiaoze.wang/hexo-blog/event-4.png",alt:"同步与异步，异步会造成线程阻塞"}})]),t._v(" "),a("h2",{attrs:{id:"事件循环与队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环与队列"}},[t._v("#")]),t._v(" 事件循环与队列")]),t._v(" "),a("p",[t._v("为了更清楚的理解"),a("code",[t._v("事件循环与队列")]),t._v("，这一块内容将采用原型图的方式展示：")]),t._v(" "),a("h3",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wangxiaoze.wang/hexo-blog/event-5.png",alt:"队列"}})]),t._v(" "),a("h3",{attrs:{id:"事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),a("blockquote",[a("p",[t._v("切记事件循环的执行顺序，优先级从高至低为：全局 > 微队列 > 交互队列 > 延迟队列,具体执行顺序可参考如下图：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wangxiaoze.wang/hexo-blog/event-6.png",alt:"事件循环"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);